<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
    xmlns:cache="http://www.springframework.org/schema/cache"  
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
	">
	
	<!-- aspecJ代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.netease.ad.omp" />
	
	<!-- 第二个注解包，这里面只有@Scheduled -->
	<!--<context:component-scan base-package="com.netease.ad.omp">
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
			&lt;!&ndash;exclude排除了扫描@service的bean。如果不排除，这里由于web启动时，首先加载这个webrequest-servlet.xml文件，这时将生成一            个没有事务的service实例注入到controller  &ndash;&gt;
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>-->
	
	<!--zzz 启用缓存-->
	<!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->    
	<cache:annotation-driven cache-manager="cacheManager"/>    
	<!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">    
	<property name="caches">    
	<set>    
	    <bean name="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"/>
	    <!--dsp缓存-->
	    <bean name="dspCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"/>
	</set>    
	</property>    
	</bean>

	<!-- springmvc方法级别 注解 权限控制 -->
	<!-- Required for security annotations to work in this servlet 
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
    </bean> -->
	
	<!-- 开启注解 静态资源处理  cache-period 开启缓存
	<mvc:annotation-driven/>
    <mvc:resources location="/image/" mapping="/image/**"  cache-period="300"/>
	<mvc:resources location="/css/" mapping="/css/**"  cache-period="300"/>
	<mvc:resources location="/js/" mapping="/js/**"  cache-period="300"/>
    <mvc:resources location="/static/" mapping="/static/**"  cache-period="300"/>
	<mvc:resources location="/font/" mapping="/font/**"   cache-period="300"/>-->

	<!-- 定时器配置 
    task:executor/@pool-size：可以指定执行线程池的初始大小、最大大小 
    task:executor/@queue-capacity：等待执行的任务队列的容量 
    task:executor/@rejection-policy：当等待队已满时的策略，分为丢弃、由任务执行器直接运行等方式
    -->
    <task:scheduler id="scheduler" pool-size="10" />  
    <task:executor id="executor" keep-alive="3600" pool-size="100-200" queue-capacity="500" rejection-policy="CALLER_RUNS" /> 
    <task:annotation-driven executor="executor" scheduler="scheduler" />
    
    
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJackson2HttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
    <!-- 启动SpringMVC的注解功能，它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->
	<mvc:annotation-driven  validator="validator">
		<mvc:message-converters>    
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">    
                <property name="supportedMediaTypes">    
                    <list>                          
                        <value>text/html;charset=UTF-8</value>   
                    </list>    
                </property>
            </bean>    
        </mvc:message-converters> 
	</mvc:annotation-driven>
	

	<!-- Default ViewResolver -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/" />
		<property name="suffix" value=".html"></property>
	</bean>


	
</beans>
