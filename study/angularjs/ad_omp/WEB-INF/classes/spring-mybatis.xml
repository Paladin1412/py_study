<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns="http://www.springframework.org/schema/beans"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/aop 
     					http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

        <!-- 启用spring对@AspectJ切面配置的支持 -->
        <aop:aspectj-autoproxy/>
        
        <context:component-scan base-package="com.netease.ad.omp.web">
        </context:component-scan>

        <!-- 数据源配置 ,使用 BoneCP 数据库连接池  -->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
                <!-- 基本属性 url、user、password -->
                <property name="url" value="${database.url}"/>
                <property name="username" value="${database.username}"/>
                <property name="password" value="${database.password}"/>

                <!-- 配置初始化大小、最小、最大 -->
                <property name="initialSize" value="1"/>
                <property name="minIdle" value="1"/>
                <property name="maxActive" value="50"/>
                <!-- 配置获取连接等待超时的时间 -->
                <property name="maxWait" value="60000"/>
                <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
                <property name="timeBetweenEvictionRunsMillis" value="300000"/>
                <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
                <property name="minEvictableIdleTimeMillis" value="300000"/>
                <property name="validationQuery" value="SELECT 'x'"/>
                <property name="testWhileIdle" value="true"/>
                <property name="testOnBorrow" value="false"/>
                <property name="testOnReturn" value="false"/>
                <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
                <property name="poolPreparedStatements" value="true"/>
                <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
                <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
                <property name="filters" value="stat"/>
        </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 引入实体类别名 -->
		<property name="configLocation" value="classpath:mybatis.xml" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/netease/ad/omp/dao/**/**/*.xml"/>
		<!-- 加入Mybatis物理分页插件 -->
		<property name="typeAliasesPackage" value="com.isea533.mybatis.model"/>
		  <property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageHelper">
		        <property name="properties">
		          <value>
		            dialect=mysql
		            reasonable=true
		          </value>
		        </property>
		      </bean>
		      <bean class="com.github.abel533.mapperhelper.MapperInterceptor">
		          <property name="properties">
		            <value>
		              mappers=com.github.abel533.mapper.Mapper
		              IDENTITY=MYSQL
		              notEmpty=true
		            </value>
		          </property>
	          </bean>
		    </array>
		  </property>
	  </bean>
	
	
        <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
		<!-- com.github.abel533.entity 自动扫描分页主键 -->
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage"
					  value="com.netease.ad.omp.dao.*.mapper,
			                 com.netease.ad.omp.*.*.mapper,
			                 com.netease.ad.omp.*.*.*.mapper" />
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		</bean>
		
		<!-- 通用Mapper组件 3.0x配置 -->
		<bean id="entityMapper" class="com.github.abel533.entity.EntityMapper" scope="prototype">
		   <constructor-arg ref="commonMapper"/>
		</bean>
		
		<bean id="sqlMapper" class="com.github.abel533.sql.SqlMapper" scope="prototype">
		   <constructor-arg ref="sqlSession"/>
		</bean>
		
		<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		   <constructor-arg index="0" ref="sqlSessionFactory"/>
		</bean>

        <!-- 事务 管理  -->
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
             <property name="dataSource" ref="dataSource"/>
        </bean>
        <!-- 使用annotation定义事务 -->
      <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
        
        <!-- 面向切面进行事物管理 -->
<!--	    <aop:config>
			<aop:pointcut expression="execution(public * netease.ad.omp.service..*.impl.*Impl.*(..))" id="pointcut"/>
			<aop:advisor advice-ref="txAdviceSysParameter" pointcut-ref="pointcut"/>
		</aop:config>
		<tx:advice id="txAdviceSysParameter" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="query*" propagation="REQUIRED" read-only="true"/>
				<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
				<tx:method name="save*" propagation="REQUIRED"/>
				<tx:method name="delete*" propagation="REQUIRED"/>
				<tx:method name="add*" propagation="REQUIRED"/>
				<tx:method name="modify*" propagation="REQUIRED"/>
				<tx:method name="update*" propagation="REQUIRED"/>
				<tx:method name="sync*" propagation="REQUIRED"/>
			</tx:attributes>
		</tx:advice>-->
</beans>
