<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <!-- =========================================================
         Shiro Components
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications-->
	
    <!-- Post processor that automatically invokes init() and destroy() methods -->
    <!-- shiro生命周期管理器 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    
    <!-- 注册相应的拦截器及默认的拦截器链 -->
    <bean id="filterChainManager" class="com.netease.ad.omp.web.controller.sys.security.filter.CustomDefaultFilterChainManager">
	    <property name="loginUrl" value="/jsp/common/login.jsp"/>
	    <property name="successUrl" value="/"/>
	    <property name="unauthorizedUrl" value="/jsp/error/unauthorized.jsp"/>
	    <property name="filters">  
            <map>  
            	<!-- 注册过滤器示例 -->
           	 	<entry key="authc">  
                	<bean class="com.netease.ad.omp.web.controller.sys.security.filter.URLMatchingAuthorizationFilter" />  
                </entry>  
                <!-- 权限URL 过滤器,用于过滤没有权限的用户访问通过连接直接访问页面 -->
                <entry key="perms">  
                	<bean class="com.netease.ad.omp.web.controller.sys.security.filter.PermissionURLAuthorizationFilter" />  
                </entry>  
            </map>  
        </property>
	    <property name="defaultFilterChainDefinitions">
	        <value>
	        	<!-- 示例拦截 -->
	        	/jsp/** = authc
	        </value>
	    </property>
	</bean>
	
	<!-- URL匹配过滤器 使用上边的filterChainManager进行拦截器链的管理 -->
    <bean id="filterChainResolver" class="com.netease.ad.omp.web.controller.sys.security.filter.URLMatchingFilterChainResolver">
    	<property name="customDefaultFilterChainManager" ref="filterChainManager"/>
	</bean>
	
	<!-- 把filterChainResolver注册给shiroFilter，其使用它进行动态URL权限控制 -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    	<property name="targetObject" ref="shiroFilter"/>
    	<property name="targetMethod" value="setFilterChainResolver"/>
    	<property name="arguments" ref="filterChainResolver"/>
	</bean>
	
    <!-- 用户授权/认证信息Cache, 采用EhCache 缓存 -->  
    <!-- <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">  
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml" />  
    </bean> -->
    <!-- 注入securityRealm -->
    <bean id="securityRealm" class="com.netease.ad.omp.web.controller.sys.security.SecurityRealm" />
    
    
    <!-- ######shiro 缓存管理器 请根据环境改变如下shiroCacheManager的配置 begin######-->
    <!-- 单机 Cache session 
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />
    -->
    <!-- 集群 Cache session  -->
    <bean id="shiroCacheManager" class="com.netease.ad.omp.web.controller.sys.security.cache.ShiroRedisCacheManager">
        <property name="cached" ref="redisCacheService" />
    </bean>
	<!-- ######shiro 缓存管理器 请根据环境改变如下shiroCacheManager的配置 end######-->
	
	<!-- 权限管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 基于数据库登录校验的实现 Realm -->
		<property name="realm" ref="securityRealm" />
		<!-- session 管理器 -->
		<!-- ######主要用于集群环境下 session集群配置管理 如在本地运行需要注释掉该代码####### -->
		<property name="sessionManager" ref="sessionManager" />
		<!-- ######主要用于集群环境下 seesion缓存管理器####### -->
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>
	
	<!-- session会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 超时时间 -->
		<property name="globalSessionTimeout" value="1800000" />
		<!-- session存储的实现 -->
		<property name="sessionDAO" ref="shiroSessionDao" />
		<!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
		<property name="sessionIdCookie" ref="sharesession" />
		<!-- 定时检查失效的session -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
	</bean>

    <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
	<bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- cookie的name,对应的默认是 JSESSIONID -->
		<constructor-arg name="name" value="SHAREJSESSIONID" />
		<!-- jsessionId的path为 / 用于多个系统共享jsessionId -->
		<property name="path" value="/" />
	</bean>
	
	<!-- session DAO 会话存储的实现 -->
	<!--<bean id="shiroSessionDao" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO" />-->
	<bean id="shiroSessionDao" class="com.netease.ad.omp.web.controller.sys.security.cache.MyEnterpriseCacheSessionDAO" />
	
    <!--基于redis分布的session共享 begin-->
    <bean id="redisCacheService" class="com.netease.ad.omp.web.controller.sys.security.cache.RedisCachedImpl">
        <property name="redisTemplate" ref="redisTemplate" />
        <property name="expire" value="86400" />
    </bean>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>

    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}" />
        <property name="port" value="${redis.port}" />
        <property name="password" value="${redis.password}" />
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxActive}" />
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.pool.maxWait}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
        <property name="testOnReturn" value="${redis.pool.testOnReturn}" />
    </bean>
	<!--基于redis分布的session共享 end-->
</beans>